===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\airflow-configmap.yaml ===== 
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-dags-config
  namespace: stock-news
data:
  stock_news_scheduler.py: |
    from airflow import DAG
    from airflow.operators.bash import BashOperator
    from airflow.utils.dates import days_ago
    from datetime import timedelta

    default_args = {
        'owner': 'stock-news-team',
        'depends_on_past': False,
        'start_date': days_ago(1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=5),
    }

    dag = DAG(
        'stock_news_scheduler',
        default_args=default_args,
        description='Schedule news crawling and financial data fetching every 4 hours',
        schedule_interval=timedelta(hours=4),
        catchup=False,
        max_active_runs=1,
        tags=['stock-news', 'scheduler'],
    )

    # News Service Scheduler Task
    news_scheduler_task = BashOperator(
        task_id='news_service_scheduler',
        bash_command='curl -X POST http://news-service:8000/api/v1/scheduler/run',
        dag=dag,
    )

    # Company Service Scheduler Task
    company_scheduler_task = BashOperator(
        task_id='company_service_scheduler',
        bash_command='curl -X POST http://company-service:8000/api/v1/scheduler/run',
        dag=dag,
    )

    # Set task dependencies (có thể chạy parallel)
    news_scheduler_task
    company_scheduler_task

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\airflow-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  namespace: stock-news
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      initContainers:
      - name: airflow-db-init
        image: apache/airflow:latest
        command: ["airflow", "db", "init"]
        env:
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql-alchemy-conn
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: fernet-key
      containers:
      - name: airflow-scheduler
        image: apache/airflow:2.7.0
        command: ["airflow", "scheduler"]
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: "LocalExecutor"
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql-alchemy-conn
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: fernet-key
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: webserver-secret-key
        - name: AIRFLOW__CORE__DAGS_FOLDER
          value: "/opt/airflow/dags"
        volumeMounts:
        - name: airflow-dags
          mountPath: /opt/airflow/dags/stock_news_scheduler.py
          subPath: stock_news_scheduler.py  # ← SỬA: Chỉ mount file cụ thể
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1.0"
      volumes:
      - name: airflow-dags
        configMap:
          name: airflow-dags-config
          defaultMode: 0755
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  namespace: stock-news
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      containers:
      - name: airflow-webserver
        image: apache/airflow:2.7.0
        command: ["airflow", "webserver"]
        ports:
        - containerPort: 8080
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: "LocalExecutor"
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql-alchemy-conn
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: fernet-key
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: webserver-secret-key
        - name: AIRFLOW__CORE__DAGS_FOLDER
          value: "/opt/airflow/dags"
        volumeMounts:
        - name: airflow-dags
          mountPath: /opt/airflow/dags/stock_news_scheduler.py
          subPath: stock_news_scheduler.py  # ← SỬA: Chỉ mount file cụ thể
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1.0"
      volumes:
      - name: airflow-dags
        configMap:
          name: airflow-dags-config
          defaultMode: 0755
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-logs-pvc
  namespace: stock-news
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-storage
  resources:
    requests:
      storage: 5Gi
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\airflow-service.yaml ===== 
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
  namespace: stock-news
  labels:
    app: airflow-webserver
spec:
  selector:
    app: airflow-webserver
  ports:
  - port: 8082
    targetPort: 8082
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-scheduler
  namespace: stock-news
  labels:
    app: airflow-scheduler
spec:
  selector:
    app: airflow-scheduler
  ports:
  - port: 8082
    targetPort: 8082
    protocol: TCP
    name: http
  type: ClusterIP

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\company-service-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: company-service
  namespace: stock-news
spec:
  replicas: 2
  selector:
    matchLabels:
      app: company-service
  template:
    metadata:
      labels:
        app: company-service
    spec:
      initContainers:
      - name: setup-company-data
        image: tieudaochannhan/company-service:latest
        command: ["python", "setup_company.py"]
        env:
        - name: COMPANY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: company-db-url
        - name: FMP_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: fmp-api-key
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "0.5"
      containers:
      - name: company-service
        image: tieudaochannhan/company-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: COMPANY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: company-db-url
        - name: FMP_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: fmp-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.25"
          limits:
            memory: "1Gi"
            cpu: "0.5"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\company-service-service.yaml ===== 
apiVersion: v1
kind: Service
metadata:
  name: company-service-k8s
  namespace: stock-news
  labels:
    app: company-service
spec:
  selector:
    app: company-service
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\frontend-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: stock-news
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: frontend
        image: tieudaochannhan/frontend:latest
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        env:
        - name: BACKEND_API_URL
          value: "http://stock-news.local/api/v1"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service-k8s
  namespace: stock-news
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: ClusterIP

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\ingress.yaml ===== 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stock-news-ingress
  namespace: stock-news
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: stock-news.local
    http:
      paths:
      # Company API - Remove rewrite, send full path
      - path: /api/v1/companies
        pathType: Prefix
        backend:
          service:
            name: company-service-k8s
            port:
              number: 8000
      
      # News API
      - path: /api/v1/articles
        pathType: Prefix
        backend:
          service:
            name: news-service-k8s
            port:
              number: 8000
      
      # AI Analysis API
      - path: /api/v1/ai-analysis
        pathType: Prefix
        backend:
          service:
            name: news-service-k8s
            port:
              number: 8000
              
      # Crawl Sources API
      - path: /api/v1/crawl-sources
        pathType: Prefix
        backend:
          service:
            name: news-service-k8s
            port:
              number: 8000
              
      # Notification API
      - path: /api/v1/users
        pathType: Prefix
        backend:
          service:
            name: notification-service-k8s
            port:
              number: 8000

      # Scheduler endpoints
      - path: /api/v1/company_scheduler
        pathType: Prefix
        backend:
          service:
            name: company-service-k8s
            port:
              number: 8000

      - path: /api/v1/news_scheduler
        pathType: Prefix
        backend:
          service:
            name: news-service-k8s
            port:
              number: 8000

      # Monitoring routes
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
              
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
              
      - path: /rabbitmq
        pathType: Prefix
        backend:
          service:
            name: rabbitmq
            port:
              number: 15672

      # # Airflow
      # - path: /airflow(/|$)(.*)
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: airflow-webserver
      #       port:
      #         number: 8080
              
      # Frontend (last to catch-all)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service-k8s
            port:
              number: 80
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: airflow-ingress
#   namespace: stock-news
#   annotations:
#     nginx.ingress.kubernetes.io/use-regex: "true"
#     nginx.ingress.kubernetes.io/rewrite-target: /$2
# spec:
#   ingressClassName: nginx
#   rules:
#   - host: stock-news.local
#     http:
#       paths:
#       - path: /airflow(/|$)(.*)
#         pathType: ImplementationSpecific
#         backend:
#           service:
#             name: airflow-webserver
#             port:
#               number: 8082

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\news-service-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: news-service
  namespace: stock-news
spec:
  replicas: 2
  selector:
    matchLabels:
      app: news-service
  template:
    metadata:
      labels:
        app: news-service
    spec:
      initContainers:
      - name: setup-news-sources
        image: tieudaochannhan/news-service:latest
        command: ["python", "setup_sample_sources.py"]
        env:
        - name: NEWS_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: news-db-url
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: gemini-api-key
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: queue-secrets
              key: rabbitmq-url
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "0.5"
      containers:
      - name: news-service
        image: tieudaochannhan/news-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: NEWS_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: news-db-url
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: gemini-api-key
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: queue-secrets
              key: rabbitmq-url
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1.0"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\news-service-service.yaml ===== 
apiVersion: v1
kind: Service
metadata:
  name: news-service-k8s
  namespace: stock-news
  labels:
    app: news-service
spec:
  selector:
    app: news-service
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\nfs-storage-class.yaml ===== 
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storage
provisioner: nfs.csi.k8s.io
parameters:
  server: localhost
  share: /srv/nfs/k8s-storage
  mountPermissions: "0777"
reclaimPolicy: Delete
allowVolumeExpansion: true
volumeBindingMode: Immediate

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\notification-service-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: stock-news
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      initContainers:
      - name: setup-watchlist
        image: tieudaochannhan/notification-service:latest
        command: ["python", "setup_watchlist.py"]
        env:
        - name: NOTIFICATION_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: notification-db-url
        - name: TELEGRAM_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: telegram-bot-token
        - name: TELEGRAM_CHAT_ID_DEFAULT
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: telegram-chat-id
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.1"
          limits:
            memory: "256Mi"
            cpu: "0.5"
      containers:
      - name: notification-service
        image: tieudaochannhan/notification-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: NOTIFICATION_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: notification-db-url
        - name: TELEGRAM_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: telegram-bot-token
        - name: TELEGRAM_CHAT_ID_DEFAULT
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: telegram-chat-id
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: queue-secrets
              key: rabbitmq-url
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "0.25"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      restartPolicy: Always

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\notification-service-service.yaml ===== 
apiVersion: v1
kind: Service
metadata:
  name: notification-service-k8s
  namespace: stock-news
  labels:
    app: notification-service
spec:
  selector:
    app: notification-service
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\postgresql-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: stock-news
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:13
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
        - name: init-db
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgresql-storage
        persistentVolumeClaim:
          claimName: postgresql-pvc
      - name: init-db
        configMap:
          name: postgresql-init
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: stock-news
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: stock-news
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-storage
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
  namespace: stock-news
data:
  init-databases.sql: |
    CREATE DATABASE news_db;
    CREATE DATABASE company_db;
    CREATE DATABASE notification_db;
    CREATE DATABASE airflow_db;

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\rabbitmq-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: stock-news
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: management
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "guest"
        - name: RABBITMQ_DEFAULT_PASS
          value: "guest"
        - name: RABBITMQ_ERLANG_COOKIE
          value: "SWQOKODSQALRPCLNMEQG"
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - -q
            - ping
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - -q
            - check_port_connectivity
          initialDelaySeconds: 40
          periodSeconds: 60
          timeoutSeconds: 30
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: stock-news
spec:
  selector:
    app: rabbitmq
  ports:
  - port: 5672
    targetPort: 5672
    protocol: TCP
    name: amqp
  - port: 15672
    targetPort: 15672
    protocol: TCP
    name: management
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
  namespace: stock-news
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-storage
  resources:
    requests:
      storage: 5Gi

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\secrets.yaml ===== 
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: stock-news
type: Opaque
data:
  # PostgreSQL URLs cho từng service
  news-db-url: cG9zdGdyZXNxbDovL3N0b2NrX3RyYWNrZXJfdXNlcjpWYW5LaHVlX1Bvc3RncmVzQHBvc3RncmVzcWw6NTQzMi9uZXdzX2Ri
  company-db-url: cG9zdGdyZXNxbDovL3N0b2NrX3RyYWNrZXJfdXNlcjpWYW5LaHVlX1Bvc3RncmVzQHBvc3RncmVzcWw6NTQzMi9jb21wYW55X2Ri
  notification-db-url: cG9zdGdyZXNxbDovL3N0b2NrX3RyYWNrZXJfdXNlcjpWYW5LaHVlX1Bvc3RncmVzQHBvc3RncmVzcWw6NTQzMi9ub3RpZmljYXRpb25fZGI=
  # Database credentials
  db-host: bG9jYWxob3N0
  db-port: NTQzMg==
  db-user: c3RvY2tfdHJhY2tlcl91c2Vy
  db-password: VmFuS2h1ZV9Qb3N0Z3Jlcw==
---
apiVersion: v1
kind: Secret
metadata:
  name: api-secrets
  namespace: stock-news
type: Opaque
data:
  gemini-api-key: QUl6YVN5Qm8xbW9WREw4ZGpkSy1GM0k3UmtSZV9PNGpqVnRjSVFR
  fmp-api-key: Q21mZmw2OEJMelYxYnpyb2g1U2xQNElVOXAzTllBeHc=
---
apiVersion: v1
kind: Secret
metadata:
  name: notification-secrets
  namespace: stock-news
type: Opaque
data:
  telegram-bot-token: NzgwMjA4ODc2MDpBQUVHU3p1aFRvRFRVREhWYlhOMjE1OUI0eXBUdEZMcllZ
  telegram-chat-id: ODAzOTE2NzkxMQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: queue-secrets
  namespace: stock-news
type: Opaque
data:
  rabbitmq-url: YW1xcDovL2d1ZXN0Omd1ZXN0QHJhYmJpdG1xOjU2NzIv
---
apiVersion: v1
kind: Secret
metadata:
  name: airflow-secrets
  namespace: stock-news
type: Opaque
data:
  sql-alchemy-conn: cG9zdGdyZXNxbDovL3N0b2NrX3RyYWNrZXJfdXNlcjpWYW5LaHVlX1Bvc3RncmVzQHBvc3RncmVzcWw6NTQzMi9haXJmbG93X2Ri
  fernet-key: OEhHeHFSdlJLc2pLdFA3alJrcmI4VkZFckhVdTRLUWZKV1p2N1g4ellRTT0=
  webserver-secret-key: TXlTZWNyZXRXZWJzZXJ2ZXJLZXlGb3JBaXJmbG93MjAyNQo=

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\deploy.sh ===== 
#!/bin/bash

set -e

echo "🚀 Deploying Stock News System with Pre-built Frontend..."

# --- Colors and Helper Functions ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# --- Prerequisite Checks ---
if ! command -v kubectl &> /dev/null; then
    print_error "kubectl is not installed or not in PATH"; exit 1;
fi
if ! command -v docker &> /dev/null; then
    print_error "docker is not installed or not in PATH"; exit 1;
fi
if ! command -v sudo &> /dev/null; then
    print_error "sudo is required for NFS setup. Please run with a user that has sudo privileges."; exit 1;
fi

# --- Namespace ---
print_status "Creating namespace 'stock-news'..."
kubectl create namespace stock-news

# --- Docker Image Build & Push ---
print_status "Building and pushing Docker images to Docker Hub..."
docker build -t company-service:latest ./company_service/
docker tag company-service:latest tieudaochannhan/company-service:latest
docker push tieudaochannhan/company-service:latest

docker build -t news-service:latest ./news_service/
docker tag news-service:latest tieudaochannhan/news-service:latest
docker push tieudaochannhan/news-service:latest

docker build -t notification-service:latest ./notification_service/
docker tag notification-service:latest tieudaochannhan/notification-service:latest
docker push tieudaochannhan/notification-service:latest

docker build -t frontend:latest ./frontend/
docker tag frontend:latest tieudaochannhan/frontend:latest
docker push tieudaochannhan/frontend:latest

# --- Kubernetes Infrastructure Setup ---
print_status "Setting up RBAC for monitoring..."
kubectl apply -f k8s/monitoring/rbac.yaml

print_status "Applying secrets..."
kubectl apply -f k8s/secrets.yaml

# --- NFS Storage Setup ---
print_status "🚀 Deploying with NFS Storage..."

# ✅ FIX 1: Install and configure the HOST's NFS server properly
print_status "📁 Setting up NFS server on the host..."
sudo apt-get update > /dev/null 2>&1
sudo apt-get install -y nfs-kernel-server > /dev/null 2>&1
sudo mkdir -p /srv/nfs/k8s-storage
sudo chown nobody:nogroup /srv/nfs/k8s-storage
sudo chmod 777 /srv/nfs/k8s-storage
echo "/srv/nfs/k8s-storage *(rw,sync,no_subtree_check,no_root_squash)" | sudo tee /etc/exports
sudo systemctl restart nfs-kernel-server
sudo exportfs -a
print_status "✅ Host NFS server is running."

# ✅ FIX 2: Install ONLY the NFS CSI Driver, not the example server
print_status "📁 Installing NFS CSI Driver..."
curl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/v4.11.0/deploy/install-driver.sh | bash -s v4.11.0 --
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/example/nfs-provisioner/nfs-server.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/example/storageclass-nfs.yaml
print_status "Waiting for NFS CSI driver to be ready..."
kubectl wait --for=condition=ready pod -l app=csi-nfs-controller -n kube-system --timeout=300s
print_status "✅ NFS CSI Driver is ready."

print_status "💾 Creating NFS StorageClass..."
kubectl apply -f k8s/nfs-storage-class.yaml

# --- Application Services Deployment ---
print_status "Deploying PostgreSQL..."
kubectl apply -f k8s/postgresql-deployment.yaml
print_status "Waiting for PostgreSQL to be ready..."
kubectl wait --for=condition=ready pod -l app=postgresql -n stock-news --timeout=300s

print_status "Deploying RabbitMQ..."
kubectl apply -f k8s/rabbitmq-deployment.yaml
print_status "Waiting for RabbitMQ to be ready..."
kubectl wait --for=condition=ready pod -l app=rabbitmq -n stock-news --timeout=300s

print_status "Deploying Monitoring Stack..."
kubectl apply -f k8s/monitoring/prometheus-config.yaml
kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
kubectl apply -f k8s/monitoring/grafana-config.yaml
kubectl apply -f k8s/monitoring/grafana-deployment.yaml

print_status "Deploying Backend Microservices..."
kubectl apply -f k8s/company-service-deployment.yaml
kubectl apply -f k8s/news-service-deployment.yaml
kubectl apply -f k8s/notification-service-deployment.yaml

print_status "Deploying Frontend..."
kubectl apply -f k8s/frontend-deployment.yaml

print_status "Deploying Service Discovery..."
kubectl apply -f k8s/company-service-service.yaml
kubectl apply -f k8s/news-service-service.yaml
kubectl apply -f k8s/notification-service-service.yaml

print_status "Deploying Airflow..."
kubectl apply -f k8s/airflow-configmap.yaml
kubectl apply -f k8s/airflow-deployment.yaml
kubectl apply -f k8s/airflow-service.yaml

# --- Ingress Setup ---
print_status "Deploying Ingress Controller and Rules..."
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.yaml
# ✅ FIX 3: Use a proper wait command
print_status "Waiting for Ingress Controller to be ready..."
kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
kubectl apply -f k8s/ingress.yaml

# --- Final Health Checks ---
print_status "Waiting for all services to be ready..."
kubectl wait --for=condition=ready pod -l app=company-service -n stock-news --timeout=300s
kubectl wait --for=condition=ready pod -l app=news-service -n stock-news --timeout=300s
kubectl wait --for=condition=ready pod -l app=notification-service -n stock-news --timeout=300s
kubectl wait --for=condition=ready pod -l app=frontend -n stock-news --timeout=300s
kubectl wait --for=condition=ready pod -l app=prometheus -n stock-news --timeout=300s
kubectl wait --for=condition=ready pod -l app=grafana -n stock-news --timeout=300s

# # --- Access Setup ---
# # Kill any existing port-forward on 8081 to avoid conflicts
# pkill -f "kubectl port-forward -n ingress-nginx service/ingress-nginx-controller 8081:80" || true
# print_status "Starting port-forward for Ingress Controller on port 8081..."
# kubectl port-forward -n ingress-nginx service/ingress-nginx-controller 8081:80 > /dev/null 2>&1 &

print_status "Setting up local DNS via /etc/hosts..."
if ! grep -q "stock-news.local" /etc/hosts; then
    echo "127.0.0.1 stock-news.local" | sudo tee -a /etc/hosts
fi

# --- Final Output ---
echo ""
print_status "✅ Deployment completed successfully!"
echo ""
# ✅ FIX 4: Add the correct port to the access URLs
echo "🌐 Access URLs:"
echo "   Frontend (Flutter Web):  http://stock-news.local:8081"
echo "   API Documentation:       http://stock-news.local:8081/api/v1/docs"
echo "   Prometheus:              http://stock-news.local:8081/prometheus"
echo "   Grafana:                 http://stock-news.local:8081/grafana (admin/admin123)"
echo "   RabbitMQ Management:     http://stock-news.local:8081/rabbitmq (guest/guest)"
echo ""
echo "📱 Frontend Features:"
echo "   - Real-time stock news dashboard"
echo "   - Company financial metrics"
echo "   - AI-powered news analysis"
echo "   - Watchlist management"
echo "   - Dark/Light theme support"
echo ""
echo "🔍 Useful commands:"
echo "   kubectl get pods -n stock-news"
echo "   kubectl logs -f deployment/frontend -n stock-news"
echo "   kubectl port-forward svc/frontend 3000:80 -n stock-news"

===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\monitoring\grafana-config.yaml ===== 
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: stock-news
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: stock-news
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'stock-news-dashboards'
      orgId: 1
      folder: 'Stock News'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
.
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\monitoring\grafana-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: stock-news
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:9.2.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: stock-news
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: NodePort
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: stock-news
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-storage  # ← THÊM
  resources:
    requests:
      storage: 5Gi
..
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\monitoring\prometheus-config.yaml ===== 
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: stock-news
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "stock_news_rules.yml"
    
    scrape_configs:
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - stock-news
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
    
    - job_name: 'stock-news-services'
      static_configs:
      - targets:
        - 'company-service:8000'
        - 'news-service:8000'
        - 'notification-service:8000'
      metrics_path: '/metrics'
      scrape_interval: 30s
    
    - job_name: 'postgresql'
      static_configs:
      - targets: ['postgresql:5432']
    
    - job_name: 'rabbitmq'
      static_configs:
      - targets: ['rabbitmq:15692']
  
  stock_news_rules.yml: |
    groups:
    - name: stock_news_alerts
      rules:
      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Service {{ $labels.instance }} is down"
      
      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage on {{ $labels.instance }}"
      
      - alert: DatabaseConnectionFailed
        expr: postgresql_up == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL database is unreachable"
..
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\monitoring\prometheus-deployment.yaml ===== 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: stock-news
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: stock-news
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: NodePort
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: stock-news
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: nfs-storage  # ← THÊM
  resources:
    requests:
      storage: 10Gi
..
===== D:\Computer Science\VNPT Internship\stock_news_tracking_devops\microservices\k8s\monitoring\rbac.yaml ===== 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: stock-news
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: stock-news
..
